# author: Peter Edge
# 12/19/2016
# email: pedge@eng.ucsd.edu

# this is a snakemake Snakefile, written using snakemake 3.5.5

localrules: all

################################################################################
# USER CONFIG
# change this list to limit the chromosomes analyzed
chroms = ['chr{}'.format(x) for x in range(1,23)]+['chrX'] #,'chrY']
# edit these to point to the correct paths for binaries / jars
# or just the program name if you have them in your PATH
REFERENCE    = 'data/reference.fa'#'/path/to/reference_genome'
TENX_BAM     = 'data/10X.bam'
VCF_DIR      = 'data/VCFs'            # vcf files should be in this directory and formatted as chr1.vcf, chr2.vcf...
HAPCUT2      = 'HAPCUT2'
FRAGMENTCUT  = '/path/to/fragmentcut' # get the source at https://github.com/vibansal/HapCUT2/tree/master/FragmentCut
SAMTOOLS     = 'samtools' # samtools 1-2, htslib 1.21
################################################################################



from getMolecules import getMolecules

rule all:
    input:
        expand('output/{chrom}.hap',chrom=chroms)

# run HapCUT2 to assemble haplotypes from combined Hi-C + 10X haplotype fragments
rule run_hapcut2_hic10X:
    params: job_name = '{chrom}.hapcut2_10X',
    input:  frag_file = 'data/10X/{chrom}',
            vcf_file  = '%s/{chrom}.vcf' % VCF_DIR
    output: hap = 'output/{chrom}.hap',
            model_file = 'output/{chrom}.htrans_model'
    shell:
        '''
        {HAPCUT2} --fragments {input.frag_file} --vcf {input.vcf_file} --output {output.hap}
        '''

# generate haplotype fragments using 10X boundaries
rule FragmentCut:
    params: job_name = 'FragmentCut.{chrom}'
    input:  bed = 'data/10X_molecule_beds/{chrom}.bed',
            vcf = '%s/{chrom}.vcf' % VCF_DIR,
            bam = TENX_BAM
    output: hairs = 'data/10X/{chrom}',
    shell:  '''{FRAGMENTCUT} --bam {input.bam} --VCF {input.vcf} --bed {input.bed} --barcode 1 --out {output.hairs} --ref {REFERENCE}''' #--regions {wildcards.chrom}:

# call boundaries of 10X molecules
rule get_molecules_10X:
    params: job_name = 'get_molecules_10X.{chrom}'
    input:  TENX_BAM,
            TENX_BAM+'.bai'
    output: 'data/10X_molecule_beds/{chrom}.bed'
    run:
        getMolecules(input[0], output[0], ref=wildcards.chrom,dist=20000)

# index bamfile
rule index_bam:
    params: job_name = 'index_bam{x}'
    input:  bam = '{x}.bam'
    output: bai = '{x}.bam.bai'
    shell:  '{SAMTOOLS} index {input.bam} {output.bai}'
